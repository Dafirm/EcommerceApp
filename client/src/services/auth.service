// import axios from "axios";

// const API_URL = "http://localhost:4000/api/v1/auth/";

// const register = (username:string, email:string, password:string) => {
//   return axios.post(API_URL + "signup", {
//     username,
//     email,
//     password,
//   });
// };

// const login = (username:string, password:string) => {
//   return axios
//     .post(API_URL + "signin", {
//       username,
//       password,
//     })
//     .then((response) => {
//       if (response.data.accessToken) {
//         localStorage.setItem("user", JSON.stringify(response.data));
//       }

//       return response.data;
//     });
// };

// const logout = () => {
//   localStorage.removeItem("user");
// };

// const getCurrentUser = () => {
//   const userStr = localStorage.getItem("user");
//   if (userStr) return JSON.parse(userStr);
// }
// const authService = {
//   register,
//   login,
//   logout,
//   getCurrentUser,
// };

// export default authService;

import axios, { AxiosRequestConfig } from 'axios'
import { User } from 'type'

const baseUrl = 'http://localhost:4000/api/v1/users'

const instance = axios.create({
  baseURL: baseUrl
})

instance.interceptors.request.use(function (config: AxiosRequestConfig) {
  if(config.headers === undefined) config.headers = {}
  else {
    const token = localStorage.getItem('library-access-token')
    config.headers['Authorization'] = `Bearer ${token}`
  }
  return config
}, function (err) {
  return Promise.reject(err)
})

export const updateUser = async (id: string, update: Partial<User>) => {
  return await instance.put(`/${id}`, update)
}

export const fetchUserById = async (id: string) => {
  return await instance.get(`/${id}`)
}
